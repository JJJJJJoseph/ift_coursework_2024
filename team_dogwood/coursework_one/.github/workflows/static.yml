# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["feature/coursework_one_dogwood"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v5
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload entire repository
        path: '.'
    # Step 2: Set up Python (for Sphinx build, if required)
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11  # Set the Python version you need

    # Step 3: Install dependencies (if required, e.g., Sphinx)
    - name: Install dependencies
      run: |
        pip install -U sphinx  # Or install Sphinx directly using pip if needed

    # Step 4: Build the Sphinx HTML files
    - name: Build Sphinx HTML documentation
      run: |
        cd team_dogwood/coursework_one
        sphinx-build -b html docs/

    # Step 5: Deploy the generated files to GitHub Pages
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
